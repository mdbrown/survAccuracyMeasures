int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t1 <- function(a1,a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
###########################################3######################################
alpha1 <- c(-1.24,-.687, .6, -2.25)
#get rho.T1 and rho.T0
rho.T1 <- get.rho.T1(alpha1, mu = 0, sd = 1)
rho.T0 <- get.rho.T0(alpha1, mu = 0, sd = 1)
rho.T1
rho.T0
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
#function to put in p0, p1, a3 and a2 and find the corresponding a1 and a0
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t1 <- function(a1,a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
##############
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
print("here")
myfun.t0 <- function(a0, a2, p0, mean, sd) integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t1 <- function(a1,a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
#function to put in p0, p1, a3 and a2 and find the corresponding a1 and a0
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t1 <- function(a1,a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
print("nowhere")
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
n
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) {expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)}
myfun.t1 <- function(a1, a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
print("nowhere")
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) {
print(u)
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)}
myfun.t1 <- function(a1, a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
print("nowhere")
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
dnorm(5,4,1)
dnorm(2,4,1)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) {
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
}
myfun.t1 <- function(a1, a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
print("nowhere")
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
legend(x="bottomright",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
alpha1
summary(glm.m1)
my.y <- seq(-5, 5, by = .001)
##Marker 1
#plot F_D1_T1(Y)
FY1.t1.d1.out <- F.t1.d1(my.y,  alpha1, mu = 0, sd = 1)
plot(my.y, FY1.t1.d1.out, type = "l", lty = 1, col = "red", xlab="marker y", ylab ="F(y |D,T)", xlim=c(-2,2), main = "marker 1")
# F_D0_T1(Y)
FY1.t1.d0.out <- F.t1.d0(my.y,  alpha1, mu = 0, sd = 1)
lines(my.y, FY1.t1.d0.out, type = "l", lty = 1)
# F_D1_T0(Y)
FY1.t0.d1.out <- F.t0.d1(my.y,  alpha1, mu = 0, sd = 1)
lines(my.y, FY1.t0.d1.out, type = "l", lty = 2, col = "red")
# F_D0_T0(Y)
FY1.t0.d0.out <- F.t0.d0(my.y,  alpha1, mu = 0, sd = 1)
lines(my.y, FY1.t0.d0.out, type = "l", lty = 2)
legend(x="bottomright",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) {
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
}
myfun.t1 <- function(a1, a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
print("nowhere")
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
#function to put in p0, p1, a3 and a2 and find the corresponding a1 and a0
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) {
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
}
print("nowhere")
myfun.t1 <- function(a1, a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
########
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0
print("nowhere")
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) {
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
}
myfun.t1 <- function(a1, a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) {
print("hello")
integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0}
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) {
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
}
myfun.t1 <- function(a1, a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) {
print(mean)
integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0}
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) {
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
}
myfun.t1 <- function(a1, a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
?dnorm
find.alphas <- function( p0, p1, a2, a3, mean, sd){
mu <- mean
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mu, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mu, sd=sd)
myfun.t0 <- function(a0, a2, p0, mu, sd) {
print(mean)
integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mu = mu, sd = sd)$value - p0}
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mu = mu, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mu, sd) {
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mu, sd=sd)
}
myfun.t1 <- function(a1, a0, a2, a3, p1, mu, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mu = mu, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
###########################################3######################################
## END OF FUNCTIONS
##################################################################################
## Testing and examples
alpha1 <- c(-1.24,-.687, .6, -2.25)
#get rho.T1 and rho.T0
rho.T1 <- get.rho.T1(alpha1, mu = 0, sd = 1)
rho.T0 <- get.rho.T0(alpha1, mu = 0, sd = 1)
#find alphas with the same marginal treatment effect but for a worse marker (lower interaction)
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
mu <- mean
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mu, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mu, sd=sd)
myfun.t0 <- function(a0, a2, p0, mu, sd) {
print(mean)
integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mu = mu, sd = sd)$value - p0}
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mu = mu, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mu, sd) {
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mu, sd=sd)
}
myfun.t1 <- function(a1, a0, a2, a3, p1, mu, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mu = mu, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean = 0, sd = 1)
find.alphas <- function( p0, p1, a2, a3, mean, sd){
##focus on obtaining a0 by using p0
#set up two functions to be used/solved later
int.function.t0 <- function(u, a0, a2, mean, sd) expit(a0 + (a2)*u)*dnorm(u, mean=mean, sd=sd)
myfun.t0 <- function(a0, a2, p0, mean, sd) {
integrate(int.function.t0, lower= -Inf, upper = Inf, a0=a0, a2=a2, mean = mean, sd = sd)$value - p0}
#obtain solution for a0
a0 <- uniroot(myfun.t0, interval = c(-10, 10), a2=a2, p0 = p0, mean = mean, sd = sd )$root
## focus on getting a1 now
#set up two functions to be used/solved later
int.function.t1 <- function(u, a0, a1, a2, a3, mean, sd) {
expit(a0 + a1 + (a2+a3)*u)*dnorm(u, mean=mean, sd=sd)
}
myfun.t1 <- function(a1, a0, a2, a3, p1, mean, sd) integrate(int.function.t1, lower= -Inf, upper = Inf, a0=a0, a1 = a1, a2=a2, a3 = a3, mean = mean, sd = sd)$value - p1
#obtain solution for a1
a1 <- uniroot(myfun.t1, interval = c(-10, 10), a0 = a0, a2=a2, a3 = a3, p1 = p1, mean = mean, sd = sd )$root
out <- c(a0, a1, a2, a3)
}
###########################################3######################################
## END OF FUNCTIONS
##################################################################################
## Testing and examples
alpha1 <- c(-1.24,-.687, .6, -2.25)
#get rho.T1 and rho.T0
rho.T1 <- get.rho.T1(alpha1, mu = 0, sd = 1)
rho.T0 <- get.rho.T0(alpha1, mu = 0, sd = 1)
#find alphas with the same marginal treatment effect but for a worse marker (lower interaction)
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean, sd)
alpha2 <- find.alphas(p0=rho.T0, p1 = rho.T1, a2 = .04, a3 = -.02, mean=0, sd=1)
alpha2
FY2.t1.d1.out <- F.d1.t1(my.y,  alpha2, mu = 0, sd = 1)
plot(my.y, FY2.t1.d1.out, type = "l", lty = 1, col = "red", xlab="marker y", ylab ="F(y |D,T)", xlim = c(-2,2), main = "marker 2")
# F_D0_T1(Y)
FY2.t1.d0.out <- F.d0.t1(my.y,  alpha2, mu = 0, sd = 1)
lines(my.y, FY2.t1.d0.out, type = "l", lty = 1)
# F_D1_T0(Y)
FY2.t0.d1.out <- F.d1.t0(my.y,  alpha2, mu = 0, sd = 1)
lines(my.y, FY2.t0.d1.out, type = "l", lty = 2, col = "red")
# F_D0_T0(Y)
FY2.t0.d0.out <- F.d0.t0(my.y,  alpha2, mu = 0, sd = 1)
lines(my.y, FY2.t0.d0.out, type = "l", lty = 2)
legend(x="bottomright",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
FY2.t1.d1.out <- F.t1.d1(my.y,  alpha2, mu = 0, sd = 1)
plot(my.y, FY2.t1.d1.out, type = "l", lty = 1, col = "red", xlab="marker y", ylab ="F(y |D,T)", xlim = c(-2,2), main = "marker 2")
FY2.t1.d0.out <- F.t1.d0(my.y,  alpha2, mu = 0, sd = 1)
lines(my.y, FY2.t1.d0.out, type = "l", lty = 1)
# F_D1_T0(Y)
FY2.t0.d1.out <- F.t0.d1(my.y,  alpha2, mu = 0, sd = 1)
lines(my.y, FY2.t0.d1.out, type = "l", lty = 2, col = "red")
FY2.t0.d0.out <- F.t0.d0(my.y,  alpha2, mu = 0, sd = 1)
lines(my.y, FY2.t0.d0.out, type = "l", lty = 2)
legend(x="bottomright",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
### Generate some data
mydata <- sim.data(n=1000000, rho.T1, rho.T0, mean = c(0,0), sd = c(1,1), grid.y = my.y, FY1.t1.d1.out, FY1.t1.d0.out, FY1.t0.d1.out, FY1.t0.d0.out,
FY2.t1.d1.out, FY2.t1.d0.out, FY2.t0.d1.out, FY2.t0.d0.out)
#take a look at marker 1
with(mydata,  plot(density(Y1[T==1 & D==1]), col = "red", main = "Marker 1 (Theta = .11)", xlab = "marker value y", ylim = c(0,.5), lwd = 2))
with(mydata, lines(density(Y1[T==1 & D==0]), lwd = 2))
with(mydata, lines(density(Y1[T==0 & D==1]), col = "red", lty=2, lwd = 2))
with(mydata, lines(density(Y1[T==0 & D==0]), lty = 2, lwd = 2))
legend(x="topright",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
#take a look at marker 2
with(mydata,  plot(density(Y2[T==1 & D==1]), col = "red", main = "Marker 2", xlab = "marker value y", ylim = c(0,.5), lwd = 2))
with(mydata, lines(density(Y2[T==1 & D==0]), lwd = 2))
with(mydata, lines(density(Y2[T==0 & D==1]), col = "red", lty=2, lwd = 2))
with(mydata, lines(density(Y2[T==0 & D==0]), lty = 2, lwd = 2))
legend(x="topright",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
#check to see if we estimate logistic parameters well
D  <- mydata$D
T  <- mydata$T
Y1 <- mydata$Y1
Y2 <- mydata$Y2
glm.m1 <- glm(D ~ T + Y1 + T*Y1, family=binomial("logit"))
glm.m2 <- glm(D ~ T + Y2 + T*Y2, family=binomial("logit"))
alpha1
summary(glm.m1)
glm.m1 <- glm(D ~ T + Y1 + Y1*T, family=binomial("logit"))
summary(glm.m1)
Y1 = -Y1
glm.m1 <- glm(D ~ T + Y1 + Y1*T, family=binomial("logit"))
alpha1
summary(glm.m1)
simY <- function(n, y, Fy){
u <- runif(n)
index.y <- sum.I(u, ">=", Fy)
sim.y <- rep(0, length(index.y))
sim.y[index.y==0] <- NA
sim.y <- y[index.y]
sim.y
}
mydata <- sim.data(n=1000000, rho.T1, rho.T0, mean = c(0,0), sd = c(1,1), grid.y = my.y, FY1.t1.d1.out, FY1.t1.d0.out, FY1.t0.d1.out, FY1.t0.d0.out,
FY2.t1.d1.out, FY2.t1.d0.out, FY2.t0.d1.out, FY2.t0.d0.out)
#take a look at marker 1
with(mydata,  plot(density(Y1[T==1 & D==1]), col = "red", main = "Marker 1 (Theta = .11)", xlab = "marker value y", ylim = c(0,.5), lwd = 2))
with(mydata, lines(density(Y1[T==1 & D==0]), lwd = 2))
with(mydata, lines(density(Y1[T==0 & D==1]), col = "red", lty=2, lwd = 2))
with(mydata, lines(density(Y1[T==0 & D==0]), lty = 2, lwd = 2))
legend(x="topright",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
legend(x="topleft",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
with(mydata,  plot(density(Y1[T==1 & D==1]), col = "red", main = "Marker 1 (Theta = .11)", xlab = "marker value y", ylim = c(0,.5), lwd = 2))
with(mydata, lines(density(Y1[T==1 & D==0]), lwd = 2))
with(mydata, lines(density(Y1[T==0 & D==1]), col = "red", lty=2, lwd = 2))
with(mydata, lines(density(Y1[T==0 & D==0]), lty = 2, lwd = 2))
legend(x="topleft",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
#take a look at marker 2
with(mydata,  plot(density(Y2[T==1 & D==1]), col = "red", main = "Marker 2", xlab = "marker value y", ylim = c(0,.5), lwd = 2))
with(mydata, lines(density(Y2[T==1 & D==0]), lwd = 2))
with(mydata, lines(density(Y2[T==0 & D==1]), col = "red", lty=2, lwd = 2))
with(mydata, lines(density(Y2[T==0 & D==0]), lty = 2, lwd = 2))
legend(x="topright",legend = c("Treated Case", "Treated Control", "Un-treated Case", "Un-treated Control"), col = c("red", "black", "red", "black"), lty =c(1,1,2,2))
#check to see if we estimate logistic parameters well
D  <- mydata$D
T  <- mydata$T
Y1 <- mydata$Y1
Y2 <- mydata$Y2
glm.m1 <- glm(D ~ T + Y1 + Y1*T, family=binomial("logit"))
glm.m2 <- glm(D ~ T + Y2 + T*Y2, family=binomial("logit"))
alpha1
summary(glm.m1)
alpha2
summary(glm.m2)
plot(Y1, Y2)
cor(Y1, Y2)
rm(list=ls())
sessionInfo()
install.packages("devtools")
library(devtools)
devtools::install_github("shiny-incubator", "rstudio")
find_rtools()
library(car)
install.packages("car")
library(car)
data(Duncan)
head(Duncan)
library(MASS)
?rlm
mod.duncan.hub <- rlm(prestige ~ income + education, data=Duncan)
fit <- fitted(mod.duncan.hub)
fit
e <- residuals(mod.duncan.hub)
e
X <- model.matrix(mod.duncan.hub)
X
setwd("GitHub//survAccuracyMeasures")
#install the package from github
if (!require("devtools")) install.packages("devtools")
devtools::install_github("survAccuracyMeasures", "mdbrown")
library(survAccuracyMeasures)
load("../survAccuracyMeasuresPower/subroutines.R")
source("../survAccuracyMeasuresPower/subroutines.R")
mydata <- SIM.data.singleMarker(1000, mu = 0, Sigma = 1, beta = 0.35, lam0 = a, cens.perc = cens.perc)
S.0 = .95
t.0 = 5 ; a = -log(S.0)/t.0
predict.time = 5
cens.perc = .2
nS = 1000 # number of sims
estimates <- bootse <- analse <- numeric(nS)
mydata <- SIM.data.singleMarker(1000, mu = 0, Sigma = 1, beta = 0.35, lam0 = a, cens.perc = cens.perc)
head(mydata)
tmp.bootests <- survEstMeasures(time = mydata$xi, event = mydata$di, marker=mydata$Y,
SEmethod='bootstrap', measures = "AUC" , bootstraps = 1000)
tmp.bootests <- survEstMeasures(time = mydata$xi, event = mydata$di, marker=mydata$Y, predict.time = predict.time,
SEmethod='bootstrap', measures = "AUC" , bootstraps = 1000)
tmp.bootests
bootse[i] <- tmp.bootests$se[2]
tmp.bootests$se[2]
tmp.bootests <- survEstMeasures(time = mydata$xi, event = mydata$di, marker=mydata$Y, predict.time = predict.time,
SEmethod='normal', measures = "AUC" , bootstraps = 1000)
tmp.analests <- survEstMeasures(time = mydata$xi, event = mydata$di, marker=mydata$Y, predict.time = predict.time,
SEmethod='normal', measures = "AUC" , bootstraps = 1000)
estimates <- tmp.analests$estimates[2]
tmp.analests$estimates[2]
S.0 = .95
t.0 = 5 ; a = -log(S.0)/t.0
predict.time = 5
cens.perc = .2
# want to compare the bootstrap, analytic and empirical SE for this case
nS = 1000 # number of sims
estimates <- bootse <- analse <- numeric(nS)
for(i in 1:n){
#sim data
mydata <- SIM.data.singleMarker(1000, mu = 0, Sigma = 1, beta = 0.35, lam0 = a, cens.perc = cens.perc)
tmp.bootests <- survEstMeasures(time = mydata$xi, event = mydata$di, marker=mydata$Y, predict.time = predict.time,
SEmethod='bootstrap', measures = "AUC" , bootstraps = 1000)
bootse[i] <- tmp.bootests$se[2]
tmp.analests <- survEstMeasures(time = mydata$xi, event = mydata$di, marker=mydata$Y, predict.time = predict.time,
SEmethod='normal', measures = "AUC" , bootstraps = 1000)
analse[i] <- tmp.analests$se[2]
estimates[i] <- tmp.analests$estimates[2]
print(i)
}
for(i in 1:nS){
#sim data
mydata <- SIM.data.singleMarker(1000, mu = 0, Sigma = 1, beta = 0.35, lam0 = a, cens.perc = cens.perc)
tmp.bootests <- survEstMeasures(time = mydata$xi, event = mydata$di, marker=mydata$Y, predict.time = predict.time,
SEmethod='bootstrap', measures = "AUC" , bootstraps = 1000)
bootse[i] <- tmp.bootests$se[2]
tmp.analests <- survEstMeasures(time = mydata$xi, event = mydata$di, marker=mydata$Y, predict.time = predict.time,
SEmethod='normal', measures = "AUC" , bootstraps = 1000)
analse[i] <- tmp.analests$se[2]
estimates[i] <- tmp.analests$estimates[2]
print(i)
}
head(estimates)
estimates= estimates[1:902]
estimates
analse = analse[1:902]
analse
bootse = bootse[1:902]
bootse
sd(estimates)
mean(analse)
mean(bootse)
fix(SIM.data.singleMarker)
fix(SIM.data.singleMarker)
library(survAccuracyMeasures)
